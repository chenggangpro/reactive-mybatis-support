package pro.chenggang.project.reactive.mybatis.support.common.mapper.dynamic;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.type.JdbcType;
import org.mybatis.dynamic.sql.BasicColumn;
import org.mybatis.dynamic.sql.delete.DeleteDSLCompleter;
import org.mybatis.dynamic.sql.select.CountDSLCompleter;
import org.mybatis.dynamic.sql.select.SelectDSLCompleter;
import org.mybatis.dynamic.sql.select.render.SelectStatementProvider;
import org.mybatis.dynamic.sql.update.UpdateDSLCompleter;
import org.mybatis.dynamic.sql.util.SqlProviderAdapter;
import org.mybatis.dynamic.sql.where.WhereApplier;
import pro.chenggang.project.reactive.mybatis.support.common.entity.Project;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.CommonCountMapper;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.CommonDeleteMapper;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.CommonInsertMapper;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.CommonSelectMapper;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.CommonUpdateMapper;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.ReactiveMyBatis3Utils;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.Collection;

import static org.mybatis.dynamic.sql.SqlBuilder.isEqualTo;
import static pro.chenggang.project.reactive.mybatis.support.common.mapper.dynamic.ProjectDynamicSqlSupport.empNo;
import static pro.chenggang.project.reactive.mybatis.support.common.mapper.dynamic.ProjectDynamicSqlSupport.endDate;
import static pro.chenggang.project.reactive.mybatis.support.common.mapper.dynamic.ProjectDynamicSqlSupport.project;
import static pro.chenggang.project.reactive.mybatis.support.common.mapper.dynamic.ProjectDynamicSqlSupport.projectId;
import static pro.chenggang.project.reactive.mybatis.support.common.mapper.dynamic.ProjectDynamicSqlSupport.startDate;

/**
 * auto generated mapper
 * 
 * @author AutoGenerated
 */
@Mapper
public interface ProjectDynamicMapper extends CommonSelectMapper, CommonCountMapper, CommonDeleteMapper, CommonInsertMapper<Project>, CommonUpdateMapper {
    BasicColumn[] selectList = BasicColumn.columnList(projectId, empNo, startDate, endDate);

    @SelectProvider(type=SqlProviderAdapter.class, method="select")
    @Results(id="ProjectResult", value = {
        @Result(column="project_id", property="projectId", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="emp_no", property="empNo", jdbcType=JdbcType.BIGINT),
        @Result(column="start_date", property="startDate", jdbcType=JdbcType.DATE),
        @Result(column="end_date", property="endDate", jdbcType=JdbcType.DATE)
    })
    Flux<Project> selectMany(SelectStatementProvider selectStatement);

    @SelectProvider(type=SqlProviderAdapter.class, method="select")
    @ResultMap("ProjectResult")
    Mono<Project> selectOne(SelectStatementProvider selectStatement);

    default Mono<Long> count(CountDSLCompleter completer) {
        return ReactiveMyBatis3Utils.countFrom(this::count, project, completer);
    }

    default Mono<Integer> delete(DeleteDSLCompleter completer) {
        return ReactiveMyBatis3Utils.deleteFrom(this::delete, project, completer);
    }

    default Mono<Integer> insert(Project row) {
        return ReactiveMyBatis3Utils.insert(this::insert, row, project, c ->
            c.map(projectId).toProperty("projectId")
            .map(empNo).toProperty("empNo")
            .map(startDate).toProperty("startDate")
            .map(endDate).toProperty("endDate")
        );
    }

    default Mono<Integer> insertMultiple(Collection<Project> records) {
        return ReactiveMyBatis3Utils.insertMultiple(this::insertMultiple, records, project, c ->
            c.map(projectId).toProperty("projectId")
            .map(empNo).toProperty("empNo")
            .map(startDate).toProperty("startDate")
            .map(endDate).toProperty("endDate")
        );
    }

    default Mono<Integer> insertSelective(Project row) {
        return ReactiveMyBatis3Utils.insert(this::insert, row, project, c ->
            c.map(projectId).toPropertyWhenPresent("projectId", row::getProjectId)
            .map(empNo).toPropertyWhenPresent("empNo", row::getEmpNo)
            .map(startDate).toPropertyWhenPresent("startDate", row::getStartDate)
            .map(endDate).toPropertyWhenPresent("endDate", row::getEndDate)
        );
    }

    default Mono<Project> selectOne(SelectDSLCompleter completer) {
        return ReactiveMyBatis3Utils.selectOne(this::selectOne, selectList, project, completer);
    }

    default Flux<Project> select(SelectDSLCompleter completer) {
        return ReactiveMyBatis3Utils.selectList(this::selectMany, selectList, project, completer);
    }

    default Flux<Project> selectDistinct(SelectDSLCompleter completer) {
        return ReactiveMyBatis3Utils.selectDistinct(this::selectMany, selectList, project, completer);
    }

    default Mono<Integer> update(UpdateDSLCompleter completer) {
        return ReactiveMyBatis3Utils.update(this::update, project, completer);
    }

    default Mono<Integer> updateSelectiveByPrimaryKey(Project row) {
        return update(c ->
            c.set(empNo).equalToWhenPresent(row::getEmpNo)
            .set(startDate).equalToWhenPresent(row::getStartDate)
            .set(endDate).equalToWhenPresent(row::getEndDate)
            .where(projectId, isEqualTo(row::getProjectId))
        );
    }

    default Mono<Integer> updateAllByPrimaryKey(Project row) {
        return update(c ->
            c.set(empNo).equalToWhenPresent(row::getEmpNo)
            .set(startDate).equalToWhenPresent(row::getStartDate)
            .set(endDate).equalToWhenPresent(row::getEndDate)
            .where(projectId, isEqualTo(row::getProjectId))
        );
    }

    default Mono<Integer> updateAll(Project row, WhereApplier whereApplier) {
        return update(c ->
            c.set(empNo).equalToWhenPresent(row::getEmpNo)
            .set(startDate).equalToWhenPresent(row::getStartDate)
            .set(endDate).equalToWhenPresent(row::getEndDate)
            .applyWhere(whereApplier)
        );
    }

    default Mono<Integer> updateSelective(Project row, WhereApplier whereApplier) {
        return update(c ->
            c.set(empNo).equalToWhenPresent(row::getEmpNo)
            .set(startDate).equalToWhenPresent(row::getStartDate)
            .set(endDate).equalToWhenPresent(row::getEndDate)
            .applyWhere(whereApplier)
        );
    }
}